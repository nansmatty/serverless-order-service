# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: practicetest123
# "service" is the name of this project. This will also be added to your AWS resource names.
service: orderService

plugins:
  - serverless-step-functions

provider:
  name: aws
  runtime: nodejs22.x
  region: ap-southeast-1
  environment:
    ORDER_TABLE: !Ref OrdersTable
    REGION: ap-southeast-1
    ORDER_QUEUE_URL: !Sub https://sqs.${AWS::Region}.amazonaws.com/${AWS::AccountId}/OrderQueue
  
  httpApi:
    authorizers:
      MyCognitoAuth:
        identitySource: $request.header.Authorization # extract the jwt token from the authorization request header
        issuerUrl: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com/ap-southeast-1_LjeywfNgL
        audience:
          - ${ssm:/CLIENT_ID}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - sqs:SendMessage
        - sqs:ReceiveMessage
        - sqs:DeleteMessage
      Resource:
        # There is multiple ways we can ref the arn in serverless.yml.
        # 1. Using Fn::GetAtt: [OrdersTable, Arn]
        - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${OrdersTable}
        - !Sub arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:OrderQueue
  
resources:
  Resources:
    OrdersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Orders
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
    
    OrderQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: OrderQueue

functions:
  placeOrder:
    handler: handlers/placeOrder.placeOrder
    environment:
      STEP_FUNCTION_ARN: !Ref OrderProcessingStateMachine # Reference the state machine ARN
    events:
      - httpApi:
          path: /place-order
          method: post
          authorizer:
            name: MyCognitoAuth
  processOrder:
    handler: handlers/processOrder.processOrder
    events:
      - sqs:
          arn:
            # Why !Sub fails here:
            # Serverless expects a string to call .split(':'), but !Sub returns an object during CloudFormation compile time.
            # !Sub works for CloudFormation but not directly where Serverless itself needs to interpret the value before deploying.
            Fn::GetAtt: [OrderQueue, Arn]
          batchSize: 10 # Number of messages to process at a time
  
  updateOrderStatus:
    handler: handlers/updateOrderStatus.updateOrderStatus

stepFunctions: #Start defining the step functions
  stateMachines: #Define list of state machines
    OrderProcessingStateMachine: # Name of the state machine\
      name: OrderProcessingStateMachine #Aws name of the state machine
      definition: # The actual structure (state transitions) of the step function
        Comment: "Order processing with status update" # Just a comment to describe the state machine
        StartAt: UpdateStatusToProcessing # The first state to start with
        States:
          UpdateStatusToProcessing:
            Type: Task
            Resource:
              Fn::GetAtt: [updateOrderStatus, Arn] # Get the ARN of the Lambda function
            Next: NotifyUser # Transition to the next state
          NotifyUser:
            Type: Pass #This is dummy state to pass-through the step
            Result: "User notified about order processing"
            End: true # This is the end of the state machine
          
